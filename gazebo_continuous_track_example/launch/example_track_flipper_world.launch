<launch>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="true" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find gazebo_continuous_track_example)/world/example_track_flipper.world" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <group ns="example_track_flipper">

        <!-- Load the URDF into the ROS Parameter Server -->
        <param name="robot_description" command="xacro --inorder '$(find gazebo_continuous_track_example)/urdf_xacro/example_track_flipper.urdf.xacro'" />

        <rosparam>
            joint_state_controller:
                type: joint_state_controller/JointStateController
                publish_rate: 10
            sprocket_left_velocity_controller:
                type: velocity_controllers/JointVelocityController
                joint: sprocket_left_axle
            sprocket_right_velocity_controller:
                type: velocity_controllers/JointVelocityController
                joint: sprocket_right_axle
            flipper_fl_position_controller:
                type: effort_controllers/JointPositionController
                joint: flipper_fl_joint
                pid: {p: 20.0, i: 0.01, d: 1.0}
            flipper_fr_position_controller:
                type: effort_controllers/JointPositionController
                joint: flipper_fr_joint
                pid: {p: 20.0, i: 0.01, d: 1.0}
            flipper_fl_velocity_controller:
                type: velocity_controllers/JointVelocityController
                joint: flipper_fl_sprocket_axle
            flipper_fr_velocity_controller:
                type: velocity_controllers/JointVelocityController
                joint: flipper_fr_sprocket_axle
            
            gazebo_ros_control:
                pid_gains:
                    flipper_fl_sprocket_axle:
                        p: 0.01
                        i: 0.0
                        d: 0.0
                        i_clamp: 0.2
                        antiwindup: false
                    flipper_fr_sprocket_axle:
                        p: 0.01
                        i: 0.0
                        d: 0.0
                        i_clamp: 0.2
                        antiwindup: false
        </rosparam>

        <!-- load and start the controllers -->
        <node name="controller_starter" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller sprocket_left_velocity_controller sprocket_right_velocity_controller flipper_fl_velocity_controller flipper_fr_velocity_controller flipper_fl_position_controller flipper_fr_position_controller" output="screen" />

        <!-- convert joint states to TF transforms for rviz, etc -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
            <param name="tf_prefix" value="example_track" />
        </node>
    </group>

</launch>